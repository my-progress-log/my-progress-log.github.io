@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@using Components
@using System.Text.Json
@using Pages
@inject IJSRuntime JS

<main>
    <div class="relative w-lvw overflow-y-scroll">
        @Body
    </div>
    <div class="fixed bottom-0 left-0 right-0 w-lvw h-64">
        @*<img src="media/mpl_logo.svg" class="h-full ml-auto p-4 backdrop-invert" />*@
        <h1 class="px-4 text-[7.5rem] leading-none text-right tracking-[-0.06em]">my-progress-log<br>.github.io</h1>
    </div>
</main>


@code {
   [Inject]
   private HttpClient HttpClient { get; set; }
    private int PostCount { get; set; } = 0;
    private bool DarkMode { get; set; } = true;
private string ContactUri
{
    get
    {
        // Check if the current URI ends with "/contact" (case-insensitive)
        return NavigationManager.Uri.TrimEnd('/').EndsWith("/contact", StringComparison.OrdinalIgnoreCase) 
            ? "/" 
            : "/contact";
    }
}

    private ValueTask PreventScrolling(bool val) {
        return JS.InvokeVoidAsync("preventScrolling", val);
    }

    private async Task OpenMenuAnimate() {
        await JS.InvokeVoidAsync("openMenu");
    }

    private async Task CloseMenuAnimate() {
        await JS.InvokeVoidAsync("closeMenu");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            // Prevent showing page before fading in
            await JS.InvokeVoidAsync("pageLoaded");
            await JS.InvokeVoidAsync("animateNavbar");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void NavigateToPage(string page) {
        var uri = Path.Combine(NavigationManager.BaseUri, page);

        if (!(uri == NavigationManager.Uri)) {
            await JS.InvokeAsync<object>("pageFadeOut");
            await JS.InvokeVoidAsync("pageLoaded");
            NavigationManager.NavigateTo(uri);
        }
    }

   protected override async Task OnInitializedAsync()
   {
        var jsonContent = await HttpClient.GetStringAsync("posts/posts.json");
        var posts = JsonSerializer.Deserialize<List<Models.Post>>(jsonContent);
        if (posts != null)
                PostCount = posts.Count;
   }
}