@using BlazorPortfolio.Models;
@inject IJSRuntime JS;
@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager;
@using Markdig;
@using MarkdownHelper = BlazorPortfolio.Helpers.MarkdownHelper
@using CustomLinkExtension = BlazorPortfolio.Helpers.CustomLinkExtension


<div class="grid grid-flow-col grid-rows-4 grid-cols-3 gap-4 w-full">
@foreach (var group in _groupedPosts) {

    <div>
        <span class="text-3xl">@group.Key</span>
        @foreach (var post in group.Value) {
            <div class="post">
                <div class="flex flex-row justify-end">
                    <span><b>@(post.DateAsDateTime.DayOfWeek + " " + post.Date)</b></span>
                    <span class="grow border-b border-dashed border-black mx-3"></span>
                    <span class="space-x-1.5">
                        <span><img src="media/satisfaction_icon.svg" class="h-4 inline-block mr-1.5"/><b>@post.Satisfaction</b></span>
                        <span><img src="media/hours_icon.svg" class="h-4 inline-block mr-1.5"/><b>@(post.Hours + "h")</b></span>
                    </span>
                </div>

                <article>@post.Content</article>
            </div>
        }
    </div>

}
</div>

@code {
    [Parameter]
    public List<Post> Posts { get; set; } = new();
    private Dictionary<string, List<Post>> _groupedPosts = new();
    private bool _contentLoaded = false;
    
    protected override async Task OnParametersSetAsync()
    {
        if (Posts.Count > 0 && !_contentLoaded) {
            var posts = await Task.WhenAll(Posts.Select(p => AddContent(p)));
            _contentLoaded = true;
            _groupedPosts = posts
                .GroupBy(p => p.DateAsDateTime.ToString("MMMM yyyy")) // Group by "Month Year"
                .ToDictionary(g => g.Key, g => g.OrderBy(a => a.DateAsDateTime).ToList());
        }
        StateHasChanged();
        await base.OnParametersSetAsync();
    }

    private async Task<Post> AddContent(Post post)
    {
        var uri = Path.Combine("posts", post.Id + ".md");
        Console.WriteLine(post.DateAsDateTime);
        Console.WriteLine(post.DateAsUriString);
        Console.WriteLine($"Fetching content from: {new Uri(HttpClient.BaseAddress, uri)}");
        var markdownContent = await HttpClient.GetStringAsync(uri);
        var pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Use<CustomLinkExtension>().Build();
        post.Content = new MarkupString(Markdown.ToHtml(markdownContent.Substring(post.ContentStartIndex), pipeline));
        return post;
    }
}